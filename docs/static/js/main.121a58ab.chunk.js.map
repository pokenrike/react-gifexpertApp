{"version":3,"sources":["components/AddCategory.js","helpers/GetGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","setCategorias","x","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAY/C,OAEI,sBAAMC,SATe,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBuB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAS,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SAAa,ECHT,SAACA,GAAc,IAAD,EAEZd,mBACtB,CACIqB,KAAK,GACLa,SAAS,IALqB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA6BtC,OApBIC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAd,GAEHY,EAAS,CACJf,KAAMG,EACNU,SAAS,SAInB,CAACpB,IAUAqB,EDxBuBI,CAAazB,GAA/Ba,EAFqB,EAE1BN,KAAYa,EAFc,EAEdA,QAQvB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAKQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEgBA,GADCA,EAAIC,aErBxBe,EAAe,WAAI,MAEOxC,mBAAU,CAAC,YAFlB,mBAEtByC,EAFsB,KAEVC,EAFU,KAO5B,OACI,qCACJ,8CACA,cAAC,EAAD,CAAa3C,cAAgB2C,IAC7B,uBAEA,6BAEID,EAAWlB,KAAI,SAAAoB,GAAC,OACb,cAAC,EAAD,CAEA7B,SAAU6B,GADLA,Y,MChBhBC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.121a58ab.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) =>{\r\n    const  [inputValue, setInputValue] = useState('');\r\n    const handleInputChange  = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n        setCategories(cats => [inputValue,...cats]);\r\n        setInputValue('');\r\n        }\r\n    }\r\nreturn(\r\n    \r\n    <form onSubmit={handleSubmit}>\r\n    <input \r\n        type='text'\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n    />\r\n    </form>\r\n    \r\n);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=rAvuovQAE6mUmQDwzFwQ9T1YKRgWnoJf`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n   \r\n    return gifs;\r\n};","import React from 'react';\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n   \r\n \r\n    return(\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import React , { useState , useEffect} \r\n//import { getGifs } from '../helpers/GetGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid =({category}) =>{\r\n    // const [imges, setImges] = useState([])\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    // useEffect(()=>{\r\n    //     getGifs(category)\r\n    //     .then(img => setImges(img));\r\n    // },[category]);\r\n  \r\n    \r\nreturn(\r\n    <>  \r\n    <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n    { loading && <p className='animate__animated animate__flash'>Loading...</p>  }\r\n    <div className='card-grid'>\r\n\r\n        \r\n        \r\n        {\r\n            images.map(img => (\r\n                <GifGridItem  \r\n                            key={img.id}\r\n                            {...img}\r\n                            />\r\n                            \r\n            )\r\n            )\r\n     }\r\n    </div>\r\n    </>\r\n)\r\n};","import { useState , useEffect} from \"react\"\r\nimport { getGifs } from '../helpers/GetGif';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState(\r\n        {\r\n            data:[],\r\n            loading: true\r\n        }\r\n    )\r\n  \r\n        useEffect(()=>{\r\n            getGifs(category)\r\n            .then(img => {\r\n             \r\n               setState({\r\n                    data: img,\r\n                    loading: false\r\n                });\r\n         \r\n            })\r\n        },[category]);\r\n    \r\n   \r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data:[1,2,3,4,5],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n    return state; //{data:[],loading:true}\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = ()=>{\r\n   // const categories = ['One puch', 'DBZ','Pokemon'];\r\n   const [categories, setCategorias] = useState( ['Pokemon']);\r\n//    const handleAdd = () =>{\r\n//        // setCategorias([...categories,'HunterXHunter']);\r\n//        setCategorias(cats => [...categories,'HunterXHunter']);\r\n//    };\r\n    return (\r\n        <>\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories={ setCategorias }/>\r\n    <hr/>\r\n \r\n    <ol>\r\n        {\r\n        categories.map(x=>(\r\n           <GifGrid \r\n           key={x}\r\n           category={x}\r\n           />\r\n        ))\r\n        }\r\n    </ol>\r\n   \r\n    </>\r\n    )\r\n\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}